#1) OBJDUMP -d
[xpazurm00@localhost elf-analysis-excercises_2023]$ objdump -d exercise-3

exercise-3:     file format elf64-x86-64


Disassembly of section .init:

0000000000401000 <_init>:
  401000:       f3 0f 1e fa             endbr64
  401004:       48 83 ec 08             sub    $0x8,%rsp
  401008:       48 8b 05 e9 2f 00 00    mov    0x2fe9(%rip),%rax        # 403ff8 <__gmon_start__@Base>
  40100f:       48 85 c0                test   %rax,%rax
  401012:       74 02                   je     401016 <_init+0x16>
  401014:       ff d0                   callq  *%rax
  401016:       48 83 c4 08             add    $0x8,%rsp
  40101a:       c3                      retq

Disassembly of section .plt:

0000000000401020 <puts@plt-0x10>:
  401020:       ff 35 e2 2f 00 00       pushq  0x2fe2(%rip)        # 404008 <_GLOBAL_OFFSET_TABLE_+0x8>
  401026:       ff 25 e4 2f 00 00       jmpq   *0x2fe4(%rip)        # 404010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40102c:       0f 1f 40 00             nopl   0x0(%rax)

0000000000401030 <puts@plt>:
  401030:       ff 25 e2 2f 00 00       jmpq   *0x2fe2(%rip)        # 404018 <puts@GLIBC_2.2.5>
  401036:       68 00 00 00 00          pushq  $0x0
  40103b:       e9 e0 ff ff ff          jmpq   401020 <_init+0x20>

0000000000401040 <printf@plt>:
  401040:       ff 25 da 2f 00 00       jmpq   *0x2fda(%rip)        # 404020 <printf@GLIBC_2.2.5>
  401046:       68 01 00 00 00          pushq  $0x1
  40104b:       e9 d0 ff ff ff          jmpq   401020 <_init+0x20>

0000000000401050 <strnlen@plt>:
  401050:       ff 25 d2 2f 00 00       jmpq   *0x2fd2(%rip)        # 404028 <strnlen@GLIBC_2.2.5>
  401056:       68 02 00 00 00          pushq  $0x2
  40105b:       e9 c0 ff ff ff          jmpq   401020 <_init+0x20>

0000000000401060 <__isoc99_scanf@plt>:
  401060:       ff 25 ca 2f 00 00       jmpq   *0x2fca(%rip)        # 404030 <__isoc99_scanf@GLIBC_2.7>
  401066:       68 03 00 00 00          pushq  $0x3
  40106b:       e9 b0 ff ff ff          jmpq   401020 <_init+0x20>

Disassembly of section .text:

0000000000401070 <_start>:
  401070:       f3 0f 1e fa             endbr64
  401074:       31 ed                   xor    %ebp,%ebp
  401076:       49 89 d1                mov    %rdx,%r9
  401079:       5e                      pop    %rsi
  40107a:       48 89 e2                mov    %rsp,%rdx
  40107d:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp
  401081:       50                      push   %rax
  401082:       54                      push   %rsp
  401083:       45 31 c0                xor    %r8d,%r8d
  401086:       31 c9                   xor    %ecx,%ecx
  401088:       48 c7 c7 56 11 40 00    mov    $0x401156,%rdi
  40108f:       ff 15 5b 2f 00 00       callq  *0x2f5b(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.34>
  401095:       f4                      hlt

0000000000401096 <.annobin_abi_note.c>:
  401096:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
  40109d:       00 00 00

00000000004010a0 <_dl_relocate_static_pie>:
  4010a0:       f3 0f 1e fa             endbr64
  4010a4:       c3                      retq

00000000004010a5 <.annobin__dl_relocate_static_pie.end>:
  4010a5:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
  4010ac:       00 00 00
  4010af:       90                      nop

00000000004010b0 <deregister_tm_clones>:
  4010b0:       b8 40 40 40 00          mov    $0x404040,%eax
  4010b5:       48 3d 40 40 40 00       cmp    $0x404040,%rax
  4010bb:       74 13                   je     4010d0 <deregister_tm_clones+0x20>
  4010bd:       b8 00 00 00 00          mov    $0x0,%eax
  4010c2:       48 85 c0                test   %rax,%rax
  4010c5:       74 09                   je     4010d0 <deregister_tm_clones+0x20>
  4010c7:       bf 40 40 40 00          mov    $0x404040,%edi
  4010cc:       ff e0                   jmpq   *%rax
  4010ce:       66 90                   xchg   %ax,%ax
  4010d0:       c3                      retq
  4010d1:       66 66 2e 0f 1f 84 00    data16 nopw %cs:0x0(%rax,%rax,1)
  4010d8:       00 00 00 00
  4010dc:       0f 1f 40 00             nopl   0x0(%rax)

00000000004010e0 <register_tm_clones>:
  4010e0:       be 40 40 40 00          mov    $0x404040,%esi
  4010e5:       48 81 ee 40 40 40 00    sub    $0x404040,%rsi
  4010ec:       48 89 f0                mov    %rsi,%rax
  4010ef:       48 c1 ee 3f             shr    $0x3f,%rsi
  4010f3:       48 c1 f8 03             sar    $0x3,%rax
  4010f7:       48 01 c6                add    %rax,%rsi
  4010fa:       48 d1 fe                sar    %rsi
  4010fd:       74 11                   je     401110 <register_tm_clones+0x30>
  4010ff:       b8 00 00 00 00          mov    $0x0,%eax
  401104:       48 85 c0                test   %rax,%rax
  401107:       74 07                   je     401110 <register_tm_clones+0x30>
  401109:       bf 40 40 40 00          mov    $0x404040,%edi
  40110e:       ff e0                   jmpq   *%rax
  401110:       c3                      retq
  401111:       66 66 2e 0f 1f 84 00    data16 nopw %cs:0x0(%rax,%rax,1)
  401118:       00 00 00 00
  40111c:       0f 1f 40 00             nopl   0x0(%rax)

0000000000401120 <__do_global_dtors_aux>:
  401120:       f3 0f 1e fa             endbr64
  401124:       80 3d 11 2f 00 00 00    cmpb   $0x0,0x2f11(%rip)        # 40403c <completed.0>
  40112b:       75 13                   jne    401140 <__do_global_dtors_aux+0x20>
  40112d:       55                      push   %rbp
  40112e:       48 89 e5                mov    %rsp,%rbp
  401131:       e8 7a ff ff ff          callq  4010b0 <deregister_tm_clones>
  401136:       c6 05 ff 2e 00 00 01    movb   $0x1,0x2eff(%rip)        # 40403c <completed.0>
  40113d:       5d                      pop    %rbp
  40113e:       c3                      retq
  40113f:       90                      nop
  401140:       c3                      retq
  401141:       66 66 2e 0f 1f 84 00    data16 nopw %cs:0x0(%rax,%rax,1)
  401148:       00 00 00 00
  40114c:       0f 1f 40 00             nopl   0x0(%rax)

0000000000401150 <frame_dummy>:
  401150:       f3 0f 1e fa             endbr64
  401154:       eb 8a                   jmp    4010e0 <register_tm_clones>

0000000000401156 <main>:
  401156:       55                      push   %rbp
  401157:       48 89 e5                mov    %rsp,%rbp
  40115a:       48 83 ec 20             sub    $0x20,%rsp
  40115e:       bf 10 20 40 00          mov    $0x402010,%edi 				# move string "Enter password:" to edi (address at 0x402010)
  401163:       b8 00 00 00 00          mov    $0x0,%eax
  401168:       e8 d3 fe ff ff          callq  401040 <printf@plt>
  40116d:       48 8d 45 e0             lea    -0x20(%rbp),%rax
  401171:       48 89 c6                mov    %rax,%rsi
  401174:       bf 21 20 40 00          mov    $0x402021,%edi 				# move string "%20s" to edi (address at 0x402021)
  401179:       b8 00 00 00 00          mov    $0x0,%eax
  40117e:       e8 dd fe ff ff          callq  401060 <__isoc99_scanf@plt>	# <--- scanf reads/parses input string
  401183:       48 8d 45 e0             lea    -0x20(%rbp),%rax
  401187:       be 14 00 00 00          mov    $0x14,%esi
  40118c:       48 89 c7                mov    %rax,%rdi
  40118f:       e8 bc fe ff ff          callq  401050 <strnlen@plt>			# <--- strlen used on input string
  401194:       48 83 f8 0c             cmp    $0xc,%rax					# <--- compare the length of input string with 0xc (12 in decimal)
  401198:       0f 85 20 01 00 00       jne    4012be <main+0x168>			# <--- if not equal, jump to address 4012be
  40119e:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)
  4011a5:       8b 45 fc                mov    -0x4(%rbp),%eax
  4011a8:       8d 50 01                lea    0x1(%rax),%edx
  4011ab:       89 55 fc                mov    %edx,-0x4(%rbp)
  4011ae:       48 98                   cltq
  4011b0:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  4011b5:       3c 39                   cmp    $0x39,%al 					# <--- compare al (low 8-bits) with 0x39 ('9' in ASCII) 
  4011b7:       0f 85 02 01 00 00       jne    4012bf <main+0x169>
  4011bd:       8b 45 fc                mov    -0x4(%rbp),%eax
  4011c0:       8d 50 01                lea    0x1(%rax),%edx
  4011c3:       89 55 fc                mov    %edx,-0x4(%rbp)
  4011c6:       48 98                   cltq
  4011c8:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  4011cd:       3c 4d                   cmp    $0x4d,%al 					# <--- compare al (low 8-bits) with 0x4d ('M' in ASCII)
  4011cf:       0f 85 ea 00 00 00       jne    4012bf <main+0x169>
  4011d5:       8b 45 fc                mov    -0x4(%rbp),%eax
  4011d8:       8d 50 01                lea    0x1(%rax),%edx
  4011db:       89 55 fc                mov    %edx,-0x4(%rbp)
  4011de:       48 98                   cltq
  4011e0:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  4011e5:       3c 75                   cmp    $0x75,%al 					# <--- compare al (low 8-bits) with 0x75 ('u' in ASCII)
  4011e7:       0f 85 d2 00 00 00       jne    4012bf <main+0x169>
  4011ed:       8b 45 fc                mov    -0x4(%rbp),%eax
  4011f0:       8d 50 01                lea    0x1(%rax),%edx
  4011f3:       89 55 fc                mov    %edx,-0x4(%rbp)
  4011f6:       48 98                   cltq
  4011f8:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  4011fd:       3c 37                   cmp    $0x37,%al 					# <--- compare al (low 8-bits) with 0x37 ('7' in ASCII)
  4011ff:       0f 85 ba 00 00 00       jne    4012bf <main+0x169>
  401205:       8b 45 fc                mov    -0x4(%rbp),%eax
  401208:       8d 50 01                lea    0x1(%rax),%edx
  40120b:       89 55 fc                mov    %edx,-0x4(%rbp)
  40120e:       48 98                   cltq
  401210:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  401215:       3c 75                   cmp    $0x75,%al 					# <--- compare al (low 8-bits) with 0x75 ('u' in ASCII)
  401217:       0f 85 a2 00 00 00       jne    4012bf <main+0x169>
  40121d:       8b 45 fc                mov    -0x4(%rbp),%eax
  401220:       8d 50 01                lea    0x1(%rax),%edx
  401223:       89 55 fc                mov    %edx,-0x4(%rbp)
  401226:       48 98                   cltq
  401228:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  40122d:       3c 73                   cmp    $0x73,%al 					# <--- compare al (low 8-bits) with 0x73 ('s' in ASCII)
  40122f:       0f 85 8a 00 00 00       jne    4012bf <main+0x169>
  401235:       8b 45 fc                mov    -0x4(%rbp),%eax
  401238:       8d 50 01                lea    0x1(%rax),%edx
  40123b:       89 55 fc                mov    %edx,-0x4(%rbp)
  40123e:       48 98                   cltq
  401240:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  401245:       3c 69                   cmp    $0x69,%al 					# <--- compare al (low 8-bits) with 0x69 ('i' in ASCII)
  401247:       75 76                   jne    4012bf <main+0x169>
  401249:       8b 45 fc                mov    -0x4(%rbp),%eax
  40124c:       8d 50 01                lea    0x1(%rax),%edx
  40124f:       89 55 fc                mov    %edx,-0x4(%rbp)
  401252:       48 98                   cltq
  401254:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  401259:       3c 61                   cmp    $0x61,%al 					# <--- compare al (low 8-bits) with 0x61 ('a' in ASCII)
  40125b:       75 62                   jne    4012bf <main+0x169>
  40125d:       8b 45 fc                mov    -0x4(%rbp),%eax
  401260:       8d 50 01                lea    0x1(%rax),%edx
  401263:       89 55 fc                mov    %edx,-0x4(%rbp)
  401266:       48 98                   cltq
  401268:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  40126d:       3c 6a                   cmp    $0x6a,%al 					# <--- compare al (low 8-bits) with 0x6a ('j' in ASCII)
  40126f:       75 4e                   jne    4012bf <main+0x169>
  401271:       8b 45 fc                mov    -0x4(%rbp),%eax
  401274:       8d 50 01                lea    0x1(%rax),%edx
  401277:       89 55 fc                mov    %edx,-0x4(%rbp)
  40127a:       48 98                   cltq
  40127c:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  401281:       3c 77                   cmp    $0x77,%al 					# <--- compare al (low 8-bits) with 0x77 ('w' in ASCII)
  401283:       75 3a                   jne    4012bf <main+0x169>
  401285:       8b 45 fc                mov    -0x4(%rbp),%eax
  401288:       8d 50 01                lea    0x1(%rax),%edx
  40128b:       89 55 fc                mov    %edx,-0x4(%rbp)
  40128e:       48 98                   cltq
  401290:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  401295:       3c 54                   cmp    $0x54,%al 					# <--- compare al (low 8-bits) with 0x54 ('T' in ASCII)
  401297:       75 26                   jne    4012bf <main+0x169>
  401299:       8b 45 fc                mov    -0x4(%rbp),%eax
  40129c:       8d 50 01                lea    0x1(%rax),%edx
  40129f:       89 55 fc                mov    %edx,-0x4(%rbp)
  4012a2:       48 98                   cltq
  4012a4:       0f b6 44 05 e0          movzbl -0x20(%rbp,%rax,1),%eax
  4012a9:       3c 4a                   cmp    $0x4a,%al 					# <--- compare al (low 8-bits) with 0x4a ('J' in ASCII)
  4012ab:       75 12                   jne    4012bf <main+0x169>
  4012ad:       bf 26 20 40 00          mov    $0x402026,%edi 				# move string "Password is correct" to edi (address at 0x402026)
  4012b2:       e8 79 fd ff ff          callq  401030 <puts@plt>
  4012b7:       b8 00 00 00 00          mov    $0x0,%eax
  4012bc:       eb 10                   jmp    4012ce <main+0x178>
  4012be:       90                      nop
  4012bf:       bf 3a 20 40 00          mov    $0x40203a,%edi 				# move string "Password is incorrect" to edi (address at 0x40203a)
  4012c4:       e8 67 fd ff ff          callq  401030 <puts@plt>
  4012c9:       b8 00 00 00 00          mov    $0x0,%eax
  4012ce:       c9                      leaveq
  4012cf:       c3                      retq

Disassembly of section .fini:

00000000004012d0 <_fini>:
  4012d0:       f3 0f 1e fa             endbr64
  4012d4:       48 83 ec 08             sub    $0x8,%rsp
  4012d8:       48 83 c4 08             add    $0x8,%rsp
  4012dc:       c3                      retq

#2) READELF SECTIONS
[xpazurm00@localhost elf-analysis-excercises_2023]$ readelf -S exercise-3
There are 31 section headers, starting at offset 0x5a50:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400318  00000318
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.gnu.pr[...] NOTE             0000000000400338  00000338
       0000000000000040  0000000000000000   A       0     0     8
  [ 3] .note.gnu.bu[...] NOTE             0000000000400378  00000378
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .note.ABI-tag     NOTE             000000000040039c  0000039c
       0000000000000020  0000000000000000   A       0     0     4
  [ 5] .gnu.hash         GNU_HASH         00000000004003c0  000003c0
       000000000000001c  0000000000000000   A       6     0     8
  [ 6] .dynsym           DYNSYM           00000000004003e0  000003e0
       00000000000000a8  0000000000000018   A       7     1     8
  [ 7] .dynstr           STRTAB           0000000000400488  00000488
       0000000000000070  0000000000000000   A       0     0     1
  [ 8] .gnu.version      VERSYM           00000000004004f8  000004f8
       000000000000000e  0000000000000002   A       6     0     2
  [ 9] .gnu.version_r    VERNEED          0000000000400508  00000508
       0000000000000040  0000000000000000   A       7     1     8
  [10] .rela.dyn         RELA             0000000000400548  00000548
       0000000000000030  0000000000000018   A       6     0     8
  [11] .rela.plt         RELA             0000000000400578  00000578
       0000000000000060  0000000000000018  AI       6    23     8
  [12] .init             PROGBITS         0000000000401000  00001000
       000000000000001b  0000000000000000  AX       0     0     4
  [13] .plt              PROGBITS         0000000000401020  00001020
       0000000000000050  0000000000000010  AX       0     0     16
  [14] .text             PROGBITS         0000000000401070  00001070
       0000000000000260  0000000000000000  AX       0     0     16
  [15] .fini             PROGBITS         00000000004012d0  000012d0
       000000000000000d  0000000000000000  AX       0     0     4
  [16] .rodata           PROGBITS         0000000000402000  00002000
       0000000000000050  0000000000000000   A       0     0     8
  [17] .eh_frame_hdr     PROGBITS         0000000000402050  00002050
       000000000000002c  0000000000000000   A       0     0     4
  [18] .eh_frame         PROGBITS         0000000000402080  00002080
       000000000000008c  0000000000000000   A       0     0     8
  [19] .init_array       INIT_ARRAY       0000000000403e10  00002e10
       0000000000000008  0000000000000008  WA       0     0     8
  [20] .fini_array       FINI_ARRAY       0000000000403e18  00002e18
       0000000000000008  0000000000000008  WA       0     0     8
  [21] .dynamic          DYNAMIC          0000000000403e20  00002e20
       00000000000001d0  0000000000000010  WA       7     0     8
  [22] .got              PROGBITS         0000000000403ff0  00002ff0
       0000000000000010  0000000000000008  WA       0     0     8
  [23] .got.plt          PROGBITS         0000000000404000  00003000
       0000000000000038  0000000000000008  WA       0     0     8
  [24] .data             PROGBITS         0000000000404038  00003038
       0000000000000004  0000000000000000  WA       0     0     1
  [25] .bss              NOBITS           000000000040403c  0000303c
       0000000000000004  0000000000000000  WA       0     0     1
  [26] .comment          PROGBITS         0000000000000000  0000303c
       000000000000002e  0000000000000001  MS       0     0     1
  [27] .gnu.build.a[...] NOTE             0000000000406040  0000306c
       0000000000001cd4  0000000000000000   L      14     0     4
  [28] .symtab           SYMTAB           0000000000000000  00004d40
       0000000000000678  0000000000000018          29    50     8
  [29] .strtab           STRTAB           0000000000000000  000053b8
       0000000000000566  0000000000000000           0     0     1
  [30] .shstrtab         STRTAB           0000000000000000  0000591e
       000000000000012c  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

#3) READELF HEX DUMP (.rodata)
[xpazurm00@localhost elf-analysis-excercises_2023]$ readelf -x .rodata exercise-3

Hex dump of section '.rodata':
  0x00402000 01000200 00000000 00000000 00000000 ................
  0x00402010 456e7465 72207061 7373776f 72643a20 Enter password:
  0x00402020 00253230 73005061 7373776f 72642069 .%20s.Password i
  0x00402030 7320636f 72726563 74005061 7373776f s correct.Passwo
  0x00402040 72642069 7320696e 636f7272 65637400 rd is incorrect.

#4) READELF STRING DUMP (.rodata)
[xpazurm00@localhost elf-analysis-excercises_2023]$ readelf -p .rodata exercise-3

String dump of section '.rodata':
  [    10]  Enter password:
  [    21]  %20s
  [    26]  Password is correct
  [    3a]  Password is incorrect

#5) CORRECT PASSWORD
[xpazurm00@localhost elf-analysis-excercises_2023]$ ./exercise-3
Enter password: 9Mu7usiajwTJ
Password is correct